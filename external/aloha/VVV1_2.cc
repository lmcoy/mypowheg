// This File is Automatically generated by ALOHA
// The process calculated in this file is:
// P(3,1)*Metric(1,2) - P(3,2)*Metric(1,2) - P(2,1)*Metric(1,3) +
// P(2,3)*Metric(1,3) + P(1,2)*Metric(2,3) - P(1,3)*Metric(2,3)
// 
#include "VVV1_2.h"

void VVV1_2(std::complex<double> V1[], std::complex<double> V3[], std::complex<double> COUP,
    double M2, double W2, std::complex<double> V2[])
{
  std::complex<double> cI = std::complex<double> (0., 1.); 
  std::complex<double> denom; 
  std::complex<double> TMP11; 
  double P1[4]; 
  std::complex<double> TMP10; 
  double P2[4]; 
  std::complex<double> TMP17; 
  double P3[4]; 
  std::complex<double> TMP20; 
  std::complex<double> TMP16; 
  std::complex<double> TMP15; 
  double OM2; 
  std::complex<double> TMP9; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  OM2 = 0.; 
  if (M2 != 0.)
    OM2 = 1./pow(M2, 2); 
  P3[0] = V3[0].real(); 
  P3[1] = V3[1].real(); 
  P3[2] = V3[1].imag(); 
  P3[3] = V3[0].imag(); 
  V2[0] = +V1[0] + V3[0]; 
  V2[1] = +V1[1] + V3[1]; 
  P2[0] = -V2[0].real(); 
  P2[1] = -V2[1].real(); 
  P2[2] = -V2[1].imag(); 
  P2[3] = -V2[0].imag(); 
  TMP20 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP9 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]); 
  TMP15 = (P1[0] * V3[2] - P1[1] * V3[3] - P1[2] * V3[4] - P1[3] * V3[5]); 
  TMP17 = (V3[2] * V1[2] - V3[3] * V1[3] - V3[4] * V1[4] - V3[5] * V1[5]); 
  TMP16 = (P2[0] * V3[2] - P2[1] * V3[3] - P2[2] * V3[4] - P2[3] * V3[5]); 
  TMP11 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]); 
  TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]); 
  denom = COUP/(pow(P2[0], 2) - pow(P2[1], 2) - pow(P2[2], 2) - pow(P2[3], 2) -
      M2 * (M2 - cI * W2));
  V2[2] = denom * (OM2 * P2[0] * (TMP17 * (-cI * (TMP11) + cI * (TMP20)) + (-cI
      * (TMP10 * TMP16) + cI * (TMP9 * TMP15))) + (TMP17 * (-cI * (P3[0]) + cI
      * (P1[0])) + (V1[2] * (-cI * (TMP15) + cI * (TMP16)) + V3[2] * (-cI *
      (TMP9) + cI * (TMP10)))));
  V2[3] = denom * (OM2 * P2[1] * (TMP17 * (-cI * (TMP11) + cI * (TMP20)) + (-cI
      * (TMP10 * TMP16) + cI * (TMP9 * TMP15))) + (TMP17 * (-cI * (P3[1]) + cI
      * (P1[1])) + (V1[3] * (-cI * (TMP15) + cI * (TMP16)) + V3[3] * (-cI *
      (TMP9) + cI * (TMP10)))));
  V2[4] = denom * (OM2 * P2[2] * (TMP17 * (-cI * (TMP11) + cI * (TMP20)) + (-cI
      * (TMP10 * TMP16) + cI * (TMP9 * TMP15))) + (TMP17 * (-cI * (P3[2]) + cI
      * (P1[2])) + (V1[4] * (-cI * (TMP15) + cI * (TMP16)) + V3[4] * (-cI *
      (TMP9) + cI * (TMP10)))));
  V2[5] = denom * (OM2 * P2[3] * (TMP17 * (-cI * (TMP11) + cI * (TMP20)) + (-cI
      * (TMP10 * TMP16) + cI * (TMP9 * TMP15))) + (TMP17 * (-cI * (P3[3]) + cI
      * (P1[3])) + (V1[5] * (-cI * (TMP15) + cI * (TMP16)) + V3[5] * (-cI *
      (TMP9) + cI * (TMP10)))));
}

